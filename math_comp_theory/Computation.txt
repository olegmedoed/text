@-all, $-exist
========= 56

- FORMAL AUTOMAT M (- DFA)
| 5-TUPLE consisting of:
|   - SET OF STATES Q
|   - INPUT ALPHABET E
|   - d:Q*E->Q  is the - TRANSITION FUNCTION (RULES OF MOVING)
|   - START STATE   q0 IN Q
|   - SET of ACCEPT STATES  F TO Q (- FINAL STATES)
|     as we see F can be {} => M have 0 accept states
|
| - TRANSITONs -  the arrows going from one state to another
| we using - TRANSITE FUNCTION d to define the RULES FOR MOVING
| d(x,1) = y - mean that M has arrow from x to y labeled with 1
|                   if M in STATE x and read 1 => it moves to y
| d specified exactly one next state for @<q, symbol>
|   => exactly one TRANSITION ARROW exits @STATE for @SYMBOL
|
| - A is a SET of @strings that M can accepts => A is the - LANGUAGE of M
|                     L(M) = A 
|     M - RECOGNIZE A(much preferred)  or   M - ACCEPT A(ambiguous)
|
|   M always REGOGNIZE only one lang
|   M ACCEPT 0 string => M recognize {}
| 
| STRING is - REJECTED if it leaves M in not ACCEPTABLE STATE

========== 61
.Example 1.15 - FORMAL definition for M5 (see example)[there "modulo 3"]
| E = {0,1,2,<res>} - alphabet
| @i >= 1,
|   let Ai be LANGUAGE of @STRING where the sum of the nums is a multiple of i
|     except that sum is reset to 0 whenever the <res> is appear
| @Ai we give the Bi which RECOGNIZE Ai
|   Bi = {Qi, E, di, q0, {q0}}
|     - Qi  is set of i STATEs  {q1..qi-1}
|     - di  @j(if Bi is in STATE qj, the running sum is j, modulo i)
|       for @qi :
|         | di(qj, 0) = qj
|         | di(qj, 1) = qk, where k = j + 1 modulo i
|         | di(qj, 2) = qk, where k = j + 2 modulo i
|         | di(qj, <res>) = q0.

- COMPUTATION - FORMAL DEFINITION of COMPUTATION for - DFA
| FINITE AUTOMATONN'S COMPUTATION
|
| M = (Q, E, d, q0, F) - FINITE AUTOMATON
| w = w1..wn   - where @wi is IN E
|
| M - ACCEPT w  if r0,..,rn in Q exists with three conditions:
|   1. r0 = q0
|   2. d(ri, w|i+1|) = r|i+1| for i = 0...n-1
|   3. rn IN F.
|-----------------
| M - RECOGNIZE LANGUAGE A  if  A = {w| M accepts w}
| 
| - REGULAR LANGUAGE
|   A is called regular lang if some automaton recognizes it
| 
| [exmp]
|   w = 10<res>22<res>012 => M5 accepts w accordin to formal def of COMPUTATION
|
|   L(M5) = {w| the sum of symbols in w is 0 modulo 3,
|               except that <res> resets the count to 0}

========= 65

- REGULAR OPEARTIONs
| (like in arithmetic 1 or 14 is objects and + or * is operations)
| in THEORY of COMPUTATION: - OBJECTs is LANGUAGEs - operations on langs is REGULAR OPERATIONs

|                                                A, B are languages
| - UNION         - A & B = {x| x IN A ; x IN B}
| - CONCATENATION - AoB   = {xy| x IN A, y IN B}
| - STAR          - A*    = {x1..xk| k >= 0, @xi IN A}
                          attaching @number of STRING in A together to get a STRING in new LANGUAGE
                          since @number includes 0 => - EMPTY STRING e is always a member of A*
  [see exmps on p66]

========= 66

- CLOSED UNDER 'some oper' -
|    applying this oper to member of set returns an object in this set
|
|  N = {1..n} - set of naturals
|
|  N is CLOSED UNDER multiplication => @(x,y IN N) x*y is IN N
|  in contrast
|  N is NOT CLOSED UNDER division,   since 1,2 IN N, but 1/2 NOT IN N

.THEOREM 1.25
|   the class of REGULAR LANGS is CLOSED UNDER the UNION(&)operation
| [that is]
|   A1,A2 is regular langs => A1&A2 is regular lang
|
| PROOF                       (by construction)
|   M1 = {Q1, E, d1, q1, F1}
|   M2 = {Q2, E, d2, q2, F2}
|   CONSTRUCT M to recognize A1&A2, where M = {Q,E, d, q0, F}
|     Q             = {(r1,r2)| r1 IN Q1, r2 IN Q2}
|     E             = usually E1 = E2 = E,
|                     but if E1!=E2 => [E = E1&E2 and theorem still true]
|     d((r1,r2), a) = (d1(r1,a),d2(r2,a)) ----  (r1,r2) IN Q, a IN A
|     q0            = (q1,q2)
|     F             = {(r1,r2)| r1 IN F1, r2 IN F2} or
|                     (F1xQ2) & (Q1xF2)
|                     [it is not the same as F1xF2] ..
|                               de facto ..
|   F1xF2 prove that => [A1,A2 is regular lang => A1^A2 is regular]
|
|   a formall correctness proof usually proceeds by induction (see Theor 1.54)
                      
======== 68

.THEOREM 1.26
|    the class of REGULAR LANGS is CLOSED UNDER the CONCATENATION(o)OPERATION
|    [that is]
|    A1,A2 is regular lans => A1oA2 is regular lang
|
|  PROOF to prove it we introduce NONDETERMINISM

|- DETERMINISTIC COMPUTATION
|    when machine is in a given state and reads the next symbol, we know that the
|    next state will be  -  it is - DETERMINED
|    [that is]
|      @step of computation follows in a unique way from preceding step
|
|  in - NONDETERMINISTIC machine several choice may exist for next state at any point.
  
  NONDETERMIMISM is a generalization of DETERMINISM, so ..
    @DETERMINISTIC FINITE AUTOMATON is automatically a NONDETERMINISTIC FINITE AUTOMATON

 |[exmp] of NFA (FIGURE 1.27 but I describe it formally)  [here e is empty string]
 |Q = {q1..q4}      E = {0,1,e}      F = {q4}     q0 = q1
 |d =                                              
 |  (q1,0)->q1, (q1,1)->q1, (q1,1)->q2
 |  (q2,0)->q3, (q2,e)->q3
 |  (q3,1)->q4
 |  (q4,0)->q4, (q4,1)->q4

========= 69

| Differences betweeb DFA and NFA
| 1. DFA have exactly 1 EXITING TRANSITION ARROW for @symbol in alphabet,
|         but NFA automaton violates this rule
| 2. in a DFA, labels on a transition arrows are only symbols from the alphabet
|     NFA may have arrows labeled with member of the alphabet or empty string(epsilon)
|       0..n arrows may exit from @state with the label e(epsilon)

- How does a NFA compute?

========== 71

| @NFA cab be converted into an equivalent DFA, and constructing NFA is sometimes
|   easier than directly constructing DFA
| an NFA can be much smaller then its DETERMINISTIC COUNTERPART, or its
|   functionality can be easier to understand

========= 72

- CONVERSATION of NFA to DFA | NFA is CONVERTED to DFA  ------ [see exmp]

  (for situation about q4 have no arrows see article that I retwited on cs.stack)
========= 74

| FORMAL DEF of - NONDETERMINISTIC FINITE AUTOMATON (- NFA)
|   @Q - P(Q) is @subsets of Q    P(Q) - POWER SET of Q
| - Ee -  E & {e}
| 
|   NONDETERMINISTIC FA is a 5-TUPLE (Q, E, d, q0, F)
|   - Q   finite set of states
|   - E   finite alphabet
|   - d: Q x Ee -> P(Q)
|   - q0 IN Q is a start state
|   - F TO Q  is a set of accept states
| 
|   [exmp] N1 = 
|   Q = {q1..q4}    E = {0,1}    q0 = q1    F = {q4}
|   d =
|     (q1,0)->{q1}, (q1,1)->{q1,q2}, (q1,e)->{}
|     (q2,0)->{q3}, (q2,1)->{}     , (q2,e)->{q3}
|     (q3,0)->{}  , (q3,1)->{q4}   , (q3,e)->{}
|     (q4,0)->{q4}, (q4,1)->{q4}   , (q4,e)->{}
| 
| - COMPUTATION - FORMAL DEFINITION of COMPUTATION for - NFA
|     N = {Q,E,d,q0,F}  -  NFA
|     w = string over E
| 
|     N is ACCEPT w if 
|       w = y1..ym, where @yi IN Ee
|       r0..rm exist in Q with three conditions
|         1. r0 = q0
|         2. r|i+1| IN d(ri, y|i+1|),  for i = 0..m-1
|         3. rm IN F

========= 75

 DFA and NFA recognize the same class of langs

- EQUIVALENT
  two MACHINES is EQUIVALENT if they recognize the same LANG

| k -  number of states of NFA,   2^k -  subset of @states.
| @subset corresponds to one of the possibilities that the DFA must remember
| =>
|   DFA simulating the NFA have  2^k states

.THEOREM 1.39
|    @NFA has EQUIVALENT DFA
|
|  PROOF
|
|  N = {Q, E, d, q0, F}      - NFA recognizing A
|  M = {Q', E, d', q0', F'}  - DFA recognizing A
|
|  let consider the easier case wherein N has no arrows
|  later we take e into account
|
|  1. Q' = - P(Q)   @state of M is subset of N states => P(Q) - set of Q subsets
|  2. R IN Q'    a IN E
|                        d'(R,a) = {q IN Q| q IN d(r,a), for some r IN R}
|  3. q0' = {q0}
|  4. F' = {R IN Q'| R contains the accept state of N}
|
|  now consider e
|  
|    |for @R of M    
|    |  E(R) =  {q| q can be reached from R by traveling along 0 or more e arrows }
|    |
|    |replacing d(r,a) by E(d(r,a))  =>
|       d'(R,a) = {q IN Q| q IN E(d(r,a)) for some r IN R}
|   q0' = E({q0})
|     [from me]        since arrow with empty string in start create several
|                      start point before we start to read any symbol
|
|  formally usually such proof proceed by induction on the number of steps of computation(see 1.54)

========= 77

.COROLLARY 1.40
  LANG is regular  <=>  some NFA recognizes it

========= 78

| .Example 1.41  converting NFA to DFA
| 
|   N4 = {Q, {a,b}, d, 1, {1}}  Q = {1,2,3}
|   d = 
|     (1,b)->2, (1,e)->3
|     (2,a)->2, (2,a)->3, (2,b)->3
|     (3,a)->1
| 
|   D -  DFA equivalent N4
|     1. D states = subset of @subsets of Q
|     2. start state is E({1}) => {1,3}
|         new accept states are those containing N4 accept state => {{1}, {1,2}, {1,3}, {1,2,3}}
|     3. we determine d (see p78)
|   
|   [ SEE DETAILS, IF INTERESTING]

========== 80

- CLOSURE UNDER REGULAR OPERATIONS
      our aim to prove that &, o, * are still REGULAR 

.THEOREM 1.45
  A1,A2 is regular => A1&A2 is regular (here proof will be proceed by using NFA)
    [SEE DETAILS]
