$args
		эта переменная равна аргументам в строке запроса;
$arg_name
		эта переменная равна аргументу name в строке запроса;
$binary_remote_addr
	 	эта переменная равна адресу клиента в бинарном виде, длина её значения всегда 4 байта;
$body_bytes_sent
		число байт, переданное клиенту, без учёта заголовка ответа; переменная совместима с параметром “%B” модуля Apache mod_log_config
$bytes_sent
		число байт, переданное клиенту (1.3.8, 1.2.5)
$connection
		порядковый номер соединения (1.3.8, 1.2.5)
$connection_requests
		текущее число запросов в соединении (1.3.8, 1.2.5)
$content_length
	 	эта переменная равна строке "Content-Length" в заголовке запроса;
$content_type
		эта переменная равна строке "Content-Type" в заголовке запроса;
$cookie_name
		эта переменная равна cookie name;
$document_root
		эта переменная равна значению директивы root для текущего запроса;
$document_uri
		то же самое, что и $uri;
$host
		эта переменная равна строке "Host" в заголовке запроса или имени сервера, на который пришёл запрос, если этой строки нет;
$hostname
		эта переменная равна имени хоста;
$http_имя
		произвольное поле заголовка запроса; последняя часть имени переменной соответствует имени поля, приведённому к нижнему регистру, с заменой символов тире на символы подчёркивания
$https
		“on” если соединение работает в режиме SSL, либо пустая строка
$is_args
		эта переменная равна "?", если в строке запроса есть аргументы, и пустой строке, если их нет;
$limit_rate
		эта переменная позволяет установить ограничение скорости соединения;
$msec
		текущее время в секундах с точностью до миллисекунд (1.3.9, 1.2.6)
$nginx_version
		версия nginx
$pid
		эта переменная равна номеру рабочего процесса;
$pipe
		“p” если запрос был pipelined, иначе “.” (1.3.12, 1.2.7)
$query_string
		то же, что и $args
$request_method
		эта переменная равна методу запроса, обычно это "GET" или "POST";
$request_completion
		“OK” если запрос завершился, либо пустая строка
$remote_addr
		эта переменная равна адресу клиента;
$remote_port
		эта переменная равна порту клиента;
$remote_user
		эта переменная равна имени пользователя, используемого в Basic аутентификации;
$realpath_root
		эта переменная равна значению директивы root для текущего запроса, при этом все символические ссылки преобразованы в реальные путь;
$request_filename
		эта переменная равна пути к файлу для текущего запроса, формируемому из директив root или alias и URI запроса;
$request
		первоначальная строка запроса целиком
$request_body
		эта переменная содержит тело запроса. Значение переменной появляется в location-ах, обрабатываемых директивами proxy_pass и fastcgi_pass.
$request_body_file
		эта переменная равна имени временного файла, в котором хранится тело запроса. По завершению работы файл необходимо удалить. Для того, чтобы тело запроса клиента всегда записывалось в файл, нужно указать client_body_in_file_only on. При передаче имени в проксированном запросе или в запросе к FastCGI-серверу следует запретить передачу самого тела директивами "proxy_pass_request_body off" или "fastcgi_pass_request_body off" соответственно.
$request_uri
		эта переменная равна полному первоначальному URI вместе с аргументами;
$query_string
		то же самое, что и $args;
$scheme
		эта переменная равна схеме запроса — "http" или "https";
$server_protocol
		эта переменная равна протоколу запроса, обычно это "HTTP/1.0" или "HTTP/1.1";
$server_addr
		эта переменная равна адресу сервера, на который пришёл запрос. Как правило, для получения значения этой переменной делается один системный вызов. Для того, чтобы избежать системного вызова, нужно указывать адреса в директивах listen и использовать параметр bind;
$server_name
		эта переменная равна имени сервера, на который пришёл запрос;
$server_port
		эта переменная равна порту сервера, на который пришёл запрос;
$status
		статус ответа (1.3.2, 1.2.2)
$time_iso8601
		локальное время в формате по стандарту ISO 8601 (1.3.12, 1.2.7)
$time_local
		локальное время в Common Log Format (1.3.12, 1.2.7)
$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space
		информация о клиентском TCP-соединении; доступна на системах, поддерживающих параметр сокета TCP_INFO
$uri
		эта переменная равна текущему URI в запросе, он может отличаться от первоначального, например, при внутренних редиректах или при использовании индексных файлов.

== Proxy variable

$proxy_host
		имя проксируемого хоста и порт;
$proxy_port
		порт проксируемого хоста;
$proxy_add_x_forwarded_for
		поле заголовка запроса клиента “X-Forwarded-For” и добавленная к нему через запятую переменная $remote_addr. Если же поля “X-Forwarded-For” в заголовке запроса клиента нет, то переменная $proxy_add_x_forwarded_for равна переменной $remote_addr.

== ngx_http_upstream_module

$upstream_addr
		хранит IP-адрес и порт сервера или путь к UNIX-сокету. Если при обработке запроса были сделаны обращения к нескольким серверам, то их адреса разделяются запятой, например, “192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock”. Если произошло внутреннее перенаправление от одной группы серверов на другую с помощью “X-Accel-Redirect” или error_page, то адреса, соответствующие разным группам серверов, разделяются двоеточием, например, “192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock : 192.168.10.1:80, 192.168.10.2:80”.
$upstream_cache_status
		хранит статус доступа к кэшу ответов (0.8.3). Статус может быть одним из “MISS”, “BYPASS”, “EXPIRED”, “STALE”, “UPDATING”, “REVALIDATED” или “HIT”.
$upstream_response_length
		хранит длины ответов, полученных от серверов группы (0.7.27); длины хранятся в байтах. Длины нескольких ответов разделяются запятыми и двоеточиями подобно адресам в переменной $upstream_addr.
$upstream_response_time
		хранит времена ответов, полученных от серверов группы; времена хранятся в секундах с точностью до миллисекунд. Времена нескольких ответов разделяются запятыми и двоеточиями подобно адресам в переменной $upstream_addr.
$upstream_status
		хранит коды ответов, полученных от серверов группы. Коды нескольких ответов разделяются запятыми и двоеточиями подобно адресам в переменной $upstream_addr.
$upstream_http_...
		хранят поля заголовка ответа сервера. Например, поле заголовка ответа “Server” доступно в переменной $upstream_http_server. Правила преобразования имён полей заголовка ответа в имена переменных такие же, как для переменных с префиксом “$http_”. Необходимо иметь в виду, что запоминаются поля заголовка только из ответа последнего сервера.

Embedded Variables
########################################################################################
########################################################################################
########################################################################################
########################################################################################

The ngx_http_core_module module supports embedded variables with names matching the Apache Server variables.
First of all, these are variables representing client request header fields, such as $http_user_agent,
$http_cookie, and so on. Also there are other variables:

$binary_remote_addr
  client address in a binary form, value’s length is always 4 bytes

$body_bytes_sent
  number of bytes sent to a client, not counting the response header; this variable is
  compatible with the “%B” parameter of the mod_log_config Apache module

$bytes_sent
  number of bytes sent to a client

$connection
  connection serial number

$connection_requests
  current number of requests made through a connection (1.3.8, 1.2.5)

$content_length
  “Content-Length” request header field

$content_type
  “Content-Type” request header field

$cookie_name
  the name cookie

$document_root
  root or alias directive’s value for the current request

$document_uri
  same as $uri

$host
  in this order of precedence: host name from the request line, or host name
  from the “Host” request header field, or the server name matching a request

$hostname
  host name

$http_name
  arbitrary request header field; the last part of a variable name is the field name
  converted to lower case with dashes replaced by underscores

$https
  “on” if connection operates in SSL mode, or an empty string otherwise

$is_args
  “?” if a request line has arguments, or an empty string otherwise

$limit_rate
  setting this variable enables response rate limiting; see limit_rate

$msec
  current time in seconds with the milliseconds resolution (1.3.9, 1.2.6)

$nginx_version
  nginx version

$pid
  PID of the worker process

$pipe
  “p” if request was pipelined, “.” otherwise (1.3.12, 1.2.7)

$query_string
  same as $args

**$realpath_root*
  an absolute pathname corresponding to the root or alias directive’s value
  for the current request, with all symbolic links resolved to real paths

$remote_addr
  client address

$remote_port
  client port

$remote_user
  user name supplied with the Basic authentication

$request
  full original request line

$request_body
  request body The variable’s value is made available in locations processed by the proxy_pass and fastcgi_pass directives.

$request_body_file
  name of a temporary file with the request body At the end of processing, the file
  needs to be removed. To always write the request body to a file, client_body_in_file_only
  needs to be enabled. When the name of a temporary file is passed in a proxied request or in
  a request to a FastCGI server, passing the request body should be disabled by the
  proxy_pass_request_body off and fastcgi_pass_request_body off directives, respectively.

$request_completion
  “OK” if a request has completed, or an empty string otherwise

$request_filename
  file path for the current request, based on the root or alias directives, and the request URI

$request_length
  request length (including request line, header, and request body) (1.3.12, 1.2.7)

$request_method
  request method, usually “GET” or “POST”

$request_time
  request processing time in seconds with a milliseconds resolution (1.3.9, 1.2.6);
  time elapsed since the first bytes were read from the client

$request_uri
  full original request URI (with arguments)

$scheme
  request scheme, “http” or “https”

$sent_http_name
  arbitrary response header field; the last part of a variable name is the field name
  converted to lower case with dashes replaced by underscores

$server_addr
  an address of the server which accepted a request Computing a value of this variable
  usually requires one system call. To avoid a system call, the listen directives must specify
  addresses and use the bind parameter.

$server_name
  name of the server which accepted a request

$server_port
  port of the server which accepted a request

$server_protocol
  request protocol, usually “HTTP/1.0” or “HTTP/1.1”

$status
  response status (1.3.2, 1.2.2)

$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space
  information about the client TCP connection; available on systems that support the TCP_INFO socket option

$time_iso8601
  local time in the ISO 8601 standard format (1.3.12, 1.2.7)

$time_local
  local time in the Common Log Format (1.3.12, 1.2.7)

$uri
  current URI in request, normalized
  The value of $uri may change during request processing, e.g. when doing internal redirects, or when using index files.
